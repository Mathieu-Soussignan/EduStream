import streamlit as st
from transformers import pipeline


@st.cache_resource
def load_summarizer():
    print("‚è≥ Chargement du mod√®le IA r√©sum√©...")
    return pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")


def generate_summary(text, summarizer, max_length=120, min_length=30):
    """
    G√©n√®re un r√©sum√© √† partir d'un texte Markdown ou brut.

    Args:
        text (str): Le contenu du cours √† r√©sumer.
        summarizer: le pipeline Hugging Face pr√©charg√©
        max_length (int): Longueur maximale du r√©sum√©.
        min_length (int): Longueur minimale du r√©sum√©.

    Returns:
        str: R√©sum√© g√©n√©r√© par le mod√®le.
    """
    if not text or len(text.strip()) < 50:
        return "Le texte est trop court pour √™tre r√©sum√©."

    summary = summarizer(text, max_length=max_length, min_length=min_length, do_sample=False)
    return summary[0]['summary_text']


# Interface de d√©mo Streamlit pour test local
if __name__ == "__main__":
    st.title("üîÑ G√©n√©rateur de r√©sum√© automatique (IA)")

    user_input = st.text_area("üìÑ Colle ton texte de cours ici :", height=300)

    if st.button("üåê G√©n√©rer le r√©sum√©"):
        with st.spinner("Analyse en cours..."):
            summarizer = load_summarizer()
            result = generate_summary(user_input, summarizer)
            st.subheader("üîπ R√©sum√© g√©n√©r√© :")
            st.success(result)